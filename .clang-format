# https://clang.llvm.org/docs/ClangFormatStyleOptions.html
Language: Cpp
AccessModifierOffset: -2
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right
AlignConsecutiveAssignments: 
  Enabled:               true
  AcrossEmptyLines:      false
  AcrossComments:        false
  AlignCompound:         true
  AlignFunctionPointers: true
  PadOperators:          true
AlignConsecutiveBitFields:
  Enabled:               true
  AcrossEmptyLines:      false
  AcrossComments:        false
  AlignCompound:         true
  AlignFunctionPointers: true
  PadOperators:          true
AlignConsecutiveDeclarations: 
  Enabled:               true
  AcrossEmptyLines:      false
  AcrossComments:        false
  AlignCompound:         true
  AlignFunctionPointers: true
  PadOperators:          true
AlignConsecutiveMacros:
  Enabled:               true
  AcrossEmptyLines:      false
  AcrossComments:        false
  AlignCompound:         true
  AlignFunctionPointers: true
  PadOperators:          true
AlignConsecutiveShortCaseStatements:
  Enabled:          true
  AcrossEmptyLines: true
  AcrossComments:   true
  AlignCaseColons:  true
AlignEscapedNewlines: Left
AlignOperands: AlignAfterOperator
AlignTrailingComments: 
  Kind: Always 
  OverEmptyLines:  0
AllowAllArgumentsOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowBreakBeforeNoexceptSpecifier: Never
AllowShortBlocksOnASingleLine: Always
AllowShortCaseLabelsOnASingleLine: false
AllowShortCompoundRequirementOnASingleLine: true
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: All
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
# AttributeMacros:   A vector of strings that should be interpreted as attributes/qualifiers instead of identifiers. This can be useful for language extensions or static analyzer annotations. NOT NEEDED               
#   - __capability    
BinPackArguments: true
BinPackParameters: true
BitFieldColonSpacing: After
BracedInitializerIndentWidth: 2
BraceWrapping:
  AfterCaseLabel:        false
  AfterClass:            false
  AfterControlStatement: false
  AfterEnum:             false
  AfterExternBlock:      false
  AfterFunction:         false
  AfterNamespace:        false
  AfterObjCDeclaration:  false
  AfterStruct:           false
  AfterUnion:            false
  BeforeCatch:           false
  BeforeElse:            false
  BeforeLambdaBody:      false
  BeforeWhile:           false
  IndentBraces:          false
  SplitEmptyFunction:    false
  SplitEmptyRecord:      false
  SplitEmptyNamespace:   false
BreakAdjacentStringLiterals: false
BreakAfterAttributes: Always
# BreakAfterJavaFieldAnnotations: false            Java configuration, not C++
BreakArrays: true
BreakBeforeBinaryOperators: All
BreakBeforeBraces: Attach
BreakBeforeConceptDeclarations: Always
# BreakBeforeInlineASMColon: OnlyMultiline        ASM configuration, not USED
BreakBeforeTernaryOperators: false
BreakConstructorInitializers: AfterColon
BreakInheritanceList: AfterColon
BreakStringLiterals: true
ColumnLimit: 100
CommentPragmas: '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DerivePointerAlignment: false
DisableFormat: false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
ExperimentalAutoDetectBinPacking: false
FixNamespaceComments: true
# ForEachMacros:            Not using Macros
#   - foreach
#   - Q_FOREACH
#   - BOOST_FOREACH
# IfMacros:                 Not using Macros
#   - KJ_IF_MAYBE
IncludeBlocks: Preserve
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''
IndentAccessModifiers: true
IndentCaseBlocks: false
IndentCaseLabels: true
IndentExternBlock: AfterExternBlock
IndentGotoLabels: true
IndentPPDirectives: AfterHash
IndentRequiresClause: false
IndentWidth: 2
IndentWrappedFunctionNames: false
InsertBraces: false
InsertNewlineAtEOF: false
InsertTrailingCommas: None
IntegerLiteralSeparator:
  Binary:           0
  BinaryMinDigits:  0
  Decimal:          0
  DecimalMinDigits: 0
  Hex:              0
  HexMinDigits:     0
# JavaScriptQuotes: Leave                   Java configuration, not C++
# JavaScriptWrapImports: true               Java configuration, not C++
# KeepEmptyLinesAtTheStartOfBlocks: true    This option is deprecated. See AtEndOfFile of KeepEmptyLines.
# KeepEmptyLinesAtEOF: false                This option is deprecated. See AtStartOfBlock of KeepEmptyLines.
LambdaBodyIndentation: OuterScope
LineEnding: LF
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
NamespaceIndentation: All
# ObjCBinPackProtocolList: Auto           ObjC configuration, not C++
# ObjCBlockIndentWidth: 2                 ObjC configuration, not C++
# ObjCBreakBeforeNestedBlockParam: true   ObjC configuration, not C++
# ObjCSpaceAfterProperty: false           ObjC configuration, not C++
# ObjCSpaceBeforeProtocolList: true       ObjC configuration, not C++
PackConstructorInitializers: BinPack
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakScopeResolution: 500
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 60
PointerAlignment: Left
PPIndentWidth: -1
QualifierAlignment: Leave
ReferenceAlignment: Pointer
ReflowComments:  true               
RemoveBracesLLVM: false          
RemoveParentheses: Leave
RemoveSemicolon: false
RequiresClausePosition: OwnLine
RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Always
ShortNamespaceLines: 1
SkipMacroDefinitionBody: false
SortIncludes: CaseSensitive
# SortJavaStaticImport: Before                Java configuration, not C++
SortUsingDeclarations: LexicographicNumeric
SpaceAfterCStyleCast: true
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: false
SpaceBeforeInheritanceColon: false
SpaceBeforeJsonColon: false
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: false
  AfterForeachMacros: false
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros:   false
  AfterOverloadedOperator: false
  AfterPlacementOperator: false
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpacesBeforeTrailingComments: 3
SpacesInAngles:  Never
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum:          1
  Maximum:         -1
SpacesInParens:  Custom
SpacesInParensOptions:
  InCStyleCasts: false
  InConditionalStatements: false
  InEmptyParentheses: false
  Other: false
SpacesInSquareBrackets: false
Standard: Latest
# StatementAttributeLikeMacros:       Not using Macros
#   - Q_EMIT
# StatementMacros:                    Not using Macros     
#   - Q_UNUSED
#   - QT_REQUIRE_VERSION
TabWidth: 8
UseTab: Never
# VerilogBreakBetweenInstancePorts: true  Verilog configuration, not C++
# WhitespaceSensitiveMacros:          Not using Macros
#   - BOOST_PP_STRINGIZE
#   - CF_SWIFT_NAME
#   - NS_SWIFT_NAME
#   - PP_STRINGIZE

